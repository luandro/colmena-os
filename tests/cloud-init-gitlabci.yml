#cloud-config

# Update package database and upgrade system
package_update: true
package_upgrade: true

# Install required packages
packages:
  # System utilities and dependencies
  - curl
  - wget
  - software-properties-common
  - ca-certificates
  - gnupg
  - lsb-release
  - apt-transport-https
  
  # Git and development tools
  - git
  - build-essential
  - gcc
  - g++
  - make
  - python3.12
  - python3.12-venv
  - python3.12-dev
  - python3-pip
  
  # System utilities
  - htop
  - vim
  - unzip
  - jq
  - tree
  - zip
  - rsync

runcmd:
  # Install Docker using official installation script
  - curl -fsSL https://get.docker.com -o get-docker.sh
  - sh get-docker.sh
  - systemctl start docker
  - systemctl enable docker
  - usermod -aG docker root
  - usermod -aG docker ubuntu
  
  # Install Docker Compose (latest version)
  - DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r '.tag_name')
  - curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  - chmod +x /usr/local/bin/docker-compose
  - ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
  
  # Install NVM and Node.js
  - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
  - export NVM_DIR="/root/.nvm"
  - '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"'
  
  # Install Node.js LTS via NVM for root user
  - sudo -u root bash -c 'export NVM_DIR="/root/.nvm" && [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" && nvm install --lts && nvm use --lts && nvm alias default lts/*'
  
  # Create Node.js symlinks for global access
  - ln -sf /root/.nvm/versions/node/$(ls /root/.nvm/versions/node/ | head -1)/bin/node /usr/local/bin/node
  - ln -sf /root/.nvm/versions/node/$(ls /root/.nvm/versions/node/ | head -1)/bin/npm /usr/local/bin/npm
  - ln -sf /root/.nvm/versions/node/$(ls /root/.nvm/versions/node/ | head -1)/bin/npx /usr/local/bin/npx
  
  # Install gitlab-ci-local
  - npm install -g gitlab-ci-local
  
  # Install additional CI tools
  - npm install -g @gitbeaker/cli
  - pip3 install gitlab-ci-lint
  
  # Create CI workspace
  - mkdir -p /opt/colmena-ci-workspace
  - chown -R root:root /opt/colmena-ci-workspace
  - chmod -R 755 /opt/colmena-ci-workspace
  
  # Configure Git (required for cloning)
  - git config --global user.name "ColmenaOS CI Test"
  - git config --global user.email "ci-test@colmena.local"
  - git config --global init.defaultBranch main
  
  # Set up Docker buildx for multi-platform builds
  - docker buildx create --use --name multiarch-builder
  - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  
  # Configure environment
  - echo 'export NVM_DIR="/root/.nvm"' >> /root/.bashrc
  - echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /root/.bashrc
  - echo 'export PATH="/opt/colmena-ci-workspace:$PATH"' >> /root/.bashrc
  
  # Clean up
  - rm -f get-docker.sh
  - apt-get autoremove -y
  - apt-get autoclean

# Docker configuration for CI
write_files:
  - path: /etc/docker/daemon.json
    content: |
      {
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "10m",
          "max-file": "3"
        },
        "storage-driver": "overlay2",
        "features": {
          "buildkit": true
        }
      }
    permissions: '0644'
  
  - path: /opt/colmena-ci-workspace/README.md
    content: |
      # ColmenaOS GitLab CI Testing Environment
      
      This environment is configured for testing GitLab CI pipelines using gitlab-ci-local.
      
      ## Available Tools
      - Docker and Docker Compose (latest)
      - Node.js LTS with npm
      - Python 3.12
      - GitLab CI Local
      - Multi-architecture build support (buildx + QEMU)
      
      ## Workspace Structure
      ```
      /opt/colmena-ci-workspace/
      ├── colmena-os/          # Main ColmenaOS project
      ├── colmena-devops/      # DevOps configurations
      ├── frontend/            # Frontend application
      ├── backend/             # Backend application
      └── ci-results/          # Test results
      ```
      
      ## Usage
      ```bash
      # Test all projects
      cd /opt/colmena-ci-workspace
      ./test-all-projects.sh
      
      # Test individual project
      cd /opt/colmena-ci-workspace/frontend
      gitlab-ci-local
      ```
    permissions: '0644'

# Restart Docker service after configuration
power_state:
  mode: reboot
  condition: true
