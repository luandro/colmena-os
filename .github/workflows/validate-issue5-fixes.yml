name: Validate Issue #5 Backend Initialization Fixes

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      verbose_output:
        description: 'Enable verbose logging for debugging'
        required: false
        default: false
        type: boolean

env:
  # Test environment variables matching our fixes
  POSTGRES_PASSWORD: test_secure_password_123
  SECRET_KEY: test_secret_key_for_testing_purposes_minimum_fifty_characters_required
  NEXTCLOUD_ADMIN_PASSWORD: test_nextcloud_admin_pass
  SUPERADMIN_PASSWORD: test_superadmin_pass
  PGADMIN_DEFAULT_PASSWORD: test_pgadmin_pass

jobs:
  validate-cors-config:
    name: Validate CORS Configuration Fix
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify CORS environment variable format
        run: |
          echo "🔍 Checking CORS_ALLOWED_ORIGINS format in .env file..."
          
          cors_value=$(grep "CORS_ALLOWED_ORIGINS=" .env | cut -d'=' -f2)
          echo "Found CORS value: $cors_value"
          
          # Check if it contains commas (old incorrect format)
          if echo "$cors_value" | grep -q ","; then
            echo "❌ CORS_ALLOWED_ORIGINS still contains commas - fix not applied correctly"
            echo "Expected: space-separated values"
            echo "Found: $cors_value"
            exit 1
          fi
          
          # Check if it contains spaces (correct format)
          if echo "$cors_value" | grep -q " "; then
            echo "✅ CORS_ALLOWED_ORIGINS correctly uses space-separated format"
          else
            echo "⚠️  CORS_ALLOWED_ORIGINS format unclear - please verify manually"
            echo "Value: $cors_value"
          fi

      - name: Verify CORS environment variable mapping in docker-compose
        run: |
          echo "🔍 Checking docker-compose.yml CORS mapping..."
          
          if grep -q "CORS_ALLOWED_ORIGINS=\${CORS_ALLOWED_ORIGINS}" docker-compose.yml; then
            echo "✅ CORS_ALLOWED_ORIGINS properly mapped in docker-compose.yml"
          else
            echo "❌ CORS_ALLOWED_ORIGINS mapping missing in docker-compose.yml"
            exit 1
          fi

  validate-backend-startup:
    name: Validate Backend Startup Script Fixes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify entrypoint.sh variable case fixes
        run: |
          echo "🔍 Checking backend/devops/builder/entrypoint.sh for variable case fixes..."
          
          entrypoint_file="backend/devops/builder/entrypoint.sh"
          
          # Check for incorrect $bin usage (should be fixed)
          if grep -q '\$bin ' "$entrypoint_file"; then
            echo "❌ Found \$bin (lowercase) usage - variable case fix not applied"
            grep -n '\$bin ' "$entrypoint_file"
            exit 1
          fi
          
          # Check for correct $BIN usage
          if grep -q '\$BIN ' "$entrypoint_file"; then
            echo "✅ Found \$BIN (uppercase) usage - variable case fix applied correctly"
            echo "Lines with \$BIN usage:"
            grep -n '\$BIN ' "$entrypoint_file"
          else
            echo "⚠️  No \$BIN usage found - please verify script structure"
          fi

      - name: Verify database environment variable mappings
        run: |
          echo "🔍 Checking database environment variable mappings in docker-compose.yml..."
          
          required_vars=(
            "POSTGRES_DATABASE=\${POSTGRES_DB:-colmena}"
            "POSTGRES_USERNAME=\${POSTGRES_USER:-colmena}"
            "POSTGRES_HOSTNAME=\${POSTGRES_HOSTNAME:-postgres}"
            "POSTGRES_PORT=\${POSTGRES_PORT:-5432}"
          )
          
          all_found=true
          for var in "${required_vars[@]}"; do
            if grep -q "$var" docker-compose.yml; then
              echo "✅ Found: $var"
            else
              echo "❌ Missing: $var"
              all_found=false
            fi
          done
          
          if [ "$all_found" = false ]; then
            echo "❌ Some database environment variable mappings are missing"
            exit 1
          else
            echo "✅ All database environment variable mappings are present"
          fi

  validate-stack-functionality:
    name: Test Complete Stack Functionality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Start services with docker-compose
        run: |
          echo "🚀 Starting ColmenaOS stack with docker-compose..."
          
          # Use our fixed environment variables
          export POSTGRES_PASSWORD="$POSTGRES_PASSWORD"
          export SECRET_KEY="$SECRET_KEY"
          export NEXTCLOUD_ADMIN_PASSWORD="$NEXTCLOUD_ADMIN_PASSWORD"
          export SUPERADMIN_PASSWORD="$SUPERADMIN_PASSWORD"
          export PGADMIN_DEFAULT_PASSWORD="$PGADMIN_DEFAULT_PASSWORD"
          
          # Start services in background
          docker-compose up -d --build
          
          echo "📝 Waiting for services to start..."
          sleep 30

      - name: Check service health and backend initialization
        run: |
          echo "🔍 Checking service status..."
          docker-compose ps
          
          echo ""
          echo "🔍 Checking colmena-app container logs for backend initialization..."
          
          # Get container logs (first 100 lines to avoid overwhelming output)
          container_logs=$(docker-compose logs colmena-app | head -100)
          echo "$container_logs"
          
          echo ""
          echo "🧪 Analyzing logs for Issue #5 indicators..."
          
          # Check for CORS error (should be absent now)
          if echo "$container_logs" | grep -q "corsheaders.E014"; then
            echo "❌ CORS error still present - Issue #5 fix failed"
            echo "Found: corsheaders.E014 Origin 'http://localhost:3000,http://127.0.0.1:3000' in CORS_ALLOWED_ORIGINS should not have path"
            exit 1
          else
            echo "✅ No CORS errors detected in logs"
          fi
          
          # Check for successful backend startup indicators
          if echo "$container_logs" | grep -q "Static files copied"; then
            echo "✅ Static files collected successfully"
          else
            echo "⚠️  Static file collection not detected in logs"
          fi
          
          if echo "$container_logs" | grep -q "success: backend entered RUNNING state"; then
            echo "✅ Backend service started successfully"
          else
            echo "⚠️  Backend service status not clearly confirmed"
          fi
          
          if echo "$container_logs" | grep -q "success: nginx entered RUNNING state"; then
            echo "✅ Nginx service started successfully"  
          else
            echo "⚠️  Nginx service status not clearly confirmed"
          fi

      - name: Test service connectivity
        run: |
          echo "🌐 Testing service connectivity..."
          
          # Test frontend accessibility
          if timeout 10 curl -f http://localhost:80 >/dev/null 2>&1; then
            echo "✅ Frontend accessible on port 80"
          else
            echo "❌ Frontend not accessible on port 80"
          fi
          
          # Test backend API accessibility  
          if timeout 10 curl -f http://localhost:8000 >/dev/null 2>&1; then
            echo "✅ Backend API accessible on port 8000"
          else
            echo "❌ Backend API not accessible on port 8000"
          fi
          
          # Test database accessibility
          if docker-compose exec -T postgres pg_isready -U colmena -d colmena >/dev/null 2>&1; then
            echo "✅ PostgreSQL database is ready"
          else
            echo "❌ PostgreSQL database not ready"
          fi

      - name: Verbose logging output
        if: inputs.verbose_output == true
        run: |
          echo "📋 Detailed container logs for debugging:"
          echo "=========================================="
          docker-compose logs colmena-app
          
          echo ""
          echo "🐳 Container inspection:"
          echo "========================"
          docker-compose exec -T colmena-app ps aux || echo "Could not list processes"

      - name: Cleanup
        if: always()
        run: |
          echo "🧹 Cleaning up test environment..."
          docker-compose down -v
          docker system prune -f

  test-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    needs: [validate-cors-config, validate-backend-startup, validate-stack-functionality]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          cors_result="${{ needs.validate-cors-config.result }}"
          startup_result="${{ needs.validate-backend-startup.result }}"
          stack_result="${{ needs.validate-stack-functionality.result }}"
          
          echo "# 🧪 Issue #5 Fix Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Individual test results
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Test Category | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "$cors_result" = "success" ]; then
            echo "| CORS Configuration | ✅ | Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| CORS Configuration | ❌ | Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$startup_result" = "success" ]; then
            echo "| Backend Startup | ✅ | Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend Startup | ❌ | Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "$stack_result" = "success" ]; then
            echo "| Stack Functionality | ✅ | Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Stack Functionality | ❌ | Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall result
          if [ "$cors_result" = "success" ] && [ "$startup_result" = "success" ] && [ "$stack_result" = "success" ]; then
            echo "## 🎉 Overall Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "All Issue #5 fixes validated successfully! Backend initialization issues are resolved." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Overall Result: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Some Issue #5 fixes need attention. Please review the test results above." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY