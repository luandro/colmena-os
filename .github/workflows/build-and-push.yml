name: Build and Push Multi-Arch Images

on:
  repository_dispatch:
    types: [submodule-update]
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      services:
        description: 'Services to build (comma-separated: frontend,backend,devops or "all")'
        required: false
        default: 'all'
        type: string
      platforms:
        description: 'Target platforms'
        required: false
        default: 'linux/amd64,linux/arm64'
        type: string

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  REGISTRY: docker.io

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.determine_services.outputs.services }}
      tag_suffix: ${{ steps.determine_tag.outputs.tag_suffix }}
      platforms: ${{ steps.determine_platforms.outputs.platforms }}
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine services to build
        id: determine_services
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Build only changed services from submodule update
            services=()
            if [ "${{ github.event.client_payload.frontend_changed }}" = "true" ]; then
              services+=("frontend")
            fi
            if [ "${{ github.event.client_payload.backend_changed }}" = "true" ]; then
              services+=("backend")
            fi
            if [ "${{ github.event.client_payload.devops_changed }}" = "true" ]; then
              services+=("devops")
            fi

            if [ ${#services[@]} -eq 0 ]; then
              services=("frontend" "backend" "devops")  # Fallback
            fi

            services_json=$(printf '%s\n' "${services[@]}" | jq -R . | jq -s .)
          elif [ "${{ inputs.services }}" != "" ] && [ "${{ inputs.services }}" != "all" ]; then
            # Use input services
            IFS=',' read -ra ADDR <<< "${{ inputs.services }}"
            services_json=$(printf '%s\n' "${ADDR[@]}" | jq -R . | jq -s .)
          else
            # Build all services
            services_json='["frontend", "backend", "devops"]'
          fi

          echo "services=$services_json" >> $GITHUB_OUTPUT
          echo "Services to build: $services_json"

      - name: Determine tag suffix
        id: determine_tag
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tag_suffix=-pr${{ github.event.number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            echo "tag_suffix=-dev" >> $GITHUB_OUTPUT
          else
            echo "tag_suffix=" >> $GITHUB_OUTPUT
          fi

      - name: Determine platforms
        id: determine_platforms
        run: |
          if [ "${{ inputs.platforms }}" != "" ]; then
            echo "platforms=${{ inputs.platforms }}" >> $GITHUB_OUTPUT
          else
            echo "platforms=linux/amd64,linux/arm64" >> $GITHUB_OUTPUT
          fi

  build-backend-devops:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, devops]
      fail-fast: false
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ matrix.service }}
          key: ${{ runner.os }}-buildx-${{ matrix.service }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.service }}-

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Determine Dockerfile path
        id: dockerfile
        run: |
          case "${{ matrix.service }}" in
            backend)
              echo "path=./backend" >> $GITHUB_OUTPUT
              echo "dockerfile=./backend/devops/builder/Dockerfile" >> $GITHUB_OUTPUT
              ;;
            devops)
              echo "path=./colmena-devops" >> $GITHUB_OUTPUT
              if [ -f "./colmena-devops/devops/apps/nextcloud/builder/Dockerfile" ]; then
                echo "dockerfile=./colmena-devops/devops/apps/nextcloud/builder/Dockerfile" >> $GITHUB_OUTPUT
              else
                echo "dockerfile=./colmena-devops/Dockerfile" >> $GITHUB_OUTPUT
              fi
              ;;
            *)
              echo "Unknown service: ${{ matrix.service }}"
              exit 1
              ;;
          esac

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.dockerfile.outputs.path }}
          file: ${{ steps.dockerfile.outputs.dockerfile }}
          platforms: ${{ needs.prepare.outputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-${{ matrix.service }}:latest${{ needs.prepare.outputs.tag_suffix }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-${{ matrix.service }}:${{ github.sha }}
          build-args: |
            NEXTCLOUD_VERSION=28.0.3
            NEXTCLOUD_API_WRAPPER_PORT=5001
            APACHE_APP_PATH=/var/www/nc_api_wrapper
            BUILD_CONTEXT=devops/apps/nextcloud/builder
            OPENAPI_SCHEMA_LOCATION=http://localhost:8000/api/schema
          labels: |
            org.opencontainers.image.title=ColmenaOS ${{ matrix.service }}
            org.opencontainers.image.description=ColmenaOS ${{ matrix.service }} service
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=local,src=/tmp/.buildx-cache-${{ matrix.service }}
          cache-to: type=local,dest=/tmp/.buildx-cache-${{ matrix.service }}-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-${{ matrix.service }}
          mv /tmp/.buildx-cache-${{ matrix.service }}-new /tmp/.buildx-cache-${{ matrix.service }}

  start-backend:
    needs: [prepare, build-backend-devops]
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.prepare.outputs.services), 'frontend') && contains(fromJson(needs.prepare.outputs.services), 'backend')
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    steps:
      - name: Wait for PostgreSQL service health check
        run: |
          echo "‚è≥ Waiting for PostgreSQL service to pass health checks..."
          # PostgreSQL service should be healthy before we proceed
          sleep 30

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Start Nextcloud service
        run: |
          # Handle different image sources for PRs vs branch builds
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üîç Using locally built devops image for PR"
            # Image was loaded locally by build-backend-devops job
          else
            echo "üîÑ Pulling devops/Nextcloud image from registry..."
            docker pull ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-devops:${{ github.sha }}
          fi

          echo "üîç Waiting for PostgreSQL to be ready..."
          # Give PostgreSQL service time to initialize
          sleep 10

          # Wait for PostgreSQL service to be fully ready
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if docker run --rm --network host -e PGPASSWORD=testpassword postgres:13 \
               psql -h localhost -U testuser -d testdb -c "SELECT version();" >/dev/null 2>&1; then
              echo "‚úÖ PostgreSQL is ready!"
              break
            fi

            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts - PostgreSQL not ready yet, waiting..."
            sleep 5
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå PostgreSQL failed to start within timeout"
            echo "üîç Checking PostgreSQL service status..."
            docker ps -a | grep postgres || echo "No PostgreSQL containers found"
            exit 1
          fi

          echo "üöÄ Starting Nextcloud service..."
          docker run -d \
            --name colmena-nextcloud \
            --network host \
            -e POSTGRES_DB=testdb \
            -e POSTGRES_USER=testuser \
            -e POSTGRES_PASSWORD=testpassword \
            -e POSTGRES_HOST=localhost \
            -e NEXTCLOUD_ADMIN_USER=admin \
            -e NEXTCLOUD_ADMIN_PASSWORD=admin123 \
            -e NEXTCLOUD_TRUSTED_DOMAINS=localhost \
            -p 80:80 \
            -p 5001:5001 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-devops:${{ github.sha }}

          echo "‚úÖ Nextcloud container started"
          docker ps -a --filter name=colmena-nextcloud

      - name: Wait for Nextcloud to be ready
        run: |
          echo "‚è≥ Waiting for Nextcloud to be ready..."
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost/status.php >/dev/null 2>&1; then
              echo "‚úÖ Nextcloud is ready!"
              break
            fi

            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts - Nextcloud not ready yet, waiting..."
            if [ $((attempt % 5)) -eq 0 ]; then
              echo "üìã Nextcloud container logs (last 10 lines):"
              docker logs --tail 10 colmena-nextcloud
            fi
            sleep 10
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Nextcloud failed to start within timeout"
            echo "üìã Full Nextcloud logs:"
            docker logs colmena-nextcloud
            echo "üîç Container status:"
            docker ps -a --filter name=colmena-nextcloud
            exit 1
          fi

      - name: Start backend service
        run: |
          # Handle different image sources for PRs vs branch builds
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üîç Using locally built backend image for PR"
            # Image was loaded locally by build-backend-devops job
          else
            echo "üîÑ Pulling backend image from registry..."
            docker pull ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-backend:${{ github.sha }}
          fi

          echo "üöÄ Starting backend service..."
          docker run -d \
            --name colmena-backend \
            --network host \
            -e DATABASE_URL=postgresql://testuser:testpassword@127.0.0.1:5432/testdb \
            -e POSTGRES_HOSTNAME=127.0.0.1 \
            -e POSTGRES_PORT=5432 \
            -e POSTGRES_DATABASE=testdb \
            -e POSTGRES_USERNAME=testuser \
            -e POSTGRES_PASSWORD=testpassword \
            -e PGHOST=127.0.0.1 \
            -e PGPORT=5432 \
            -e PGDATABASE=testdb \
            -e PGUSER=testuser \
            -e PGPASSWORD=testpassword \
            -e COLMENA_SECRET_KEY=test-secret-key-for-ci-minimum-50-characters-long-random-string-here \
            -e DEBUG=1 \
            -e LOG_LEVEL=DEBUG \
            -e DJANGO_SETTINGS_MODULE=colmena.settings.dev \
            -e CSRF_TRUSTED_ORIGINS=http://localhost:8000 \
            -e CORS_ALLOWED_ORIGINS=http://localhost:8000 \
            -e NEXTCLOUD_URL=http://localhost \
            -e NEXTCLOUD_API_URL=http://localhost/ocs/v2.php \
            -e NEXTCLOUD_API_WRAPPER_URL=http://localhost:5001 \
            -e NEXTCLOUD_ADMIN_USER=admin \
            -e NEXTCLOUD_ADMIN_PASSWORD=admin123 \
            -p 8000:8000 \
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-backend:${{ github.sha }}

          echo "‚úÖ Backend container started"
          docker ps -a --filter name=colmena-backend

          # Give container a moment to start
          sleep 3

          echo "üîç Checking if container is running..."
          if docker ps --filter name=colmena-backend --filter status=running --quiet | grep -q .; then
            echo "‚úÖ Container is running"
            echo "üîç Checking environment variables in container..."
            docker exec colmena-backend env | grep -E "(COLMENA_SECRET_KEY|DEBUG|DATABASE_URL|POSTGRES_|CSRF_|CORS_)" || echo "Environment variables not found"
          else
            echo "‚ùå Container is not running, checking logs..."
            docker logs colmena-backend
          fi

      - name: Wait for backend to be ready
        run: |
          echo "‚è≥ Waiting for backend to be ready..."
          max_attempts=30
          attempt=0

          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:8000/api/schema >/dev/null 2>&1; then
              echo "‚úÖ Backend is ready!"
              echo "üìã Schema preview:"
              curl -s http://localhost:8000/api/schema | head -20
              break
            fi

            attempt=$((attempt + 1))
            echo "Attempt $attempt/$max_attempts - Backend not ready yet, waiting..."

            # Show logs every 5 attempts for debugging
            if [ $((attempt % 5)) -eq 0 ]; then
              echo "üìã Backend container logs (last 15 lines):"
              docker logs --tail 15 colmena-backend
              echo "üîç Container status:"
              docker ps -a --filter name=colmena-backend
              echo "üåê Network connectivity test:"
              curl -v http://localhost:8000/admin/ 2>&1 | head -10 || echo "Connection failed"
            fi
            sleep 10
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "‚ùå Backend failed to start within timeout"
            echo "üìã Full backend logs:"
            docker logs colmena-backend
            echo "üìã Nextcloud logs (last 20 lines):"
            docker logs --tail 20 colmena-nextcloud
            echo "üîç All containers status:"
            docker ps -a
            echo "üåê Port usage:"
            netstat -tlnp | grep -E ':(80|8000|5432|5001)'
            exit 1
          fi

  build-frontend:
    needs: [prepare, start-backend]
    runs-on: ubuntu-latest
    if: contains(fromJson(needs.prepare.outputs.services), 'frontend')
    steps:
      - name: Checkout code with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-frontend
          key: ${{ runner.os }}-buildx-frontend-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-frontend-

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          file: ./frontend/devops/builder/Dockerfile.local
          platforms: ${{ needs.prepare.outputs.platforms }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-frontend:latest${{ needs.prepare.outputs.tag_suffix }}
            ${{ env.REGISTRY }}/${{ env.DOCKERHUB_USERNAME }}/colmena-frontend:${{ github.sha }}
          build-args: |
            OPENAPI_SCHEMA_LOCATION=http://localhost:8000/api/schema
          network: host
          labels: |
            org.opencontainers.image.title=ColmenaOS frontend
            org.opencontainers.image.description=ColmenaOS frontend service
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=local,src=/tmp/.buildx-cache-frontend
          cache-to: type=local,dest=/tmp/.buildx-cache-frontend-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-frontend
          mv /tmp/.buildx-cache-frontend-new /tmp/.buildx-cache-frontend

      - name: Cleanup services
        if: always()
        run: |
          echo "üßπ Cleaning up services..."
          docker stop colmena-backend colmena-nextcloud || true
          docker rm colmena-backend colmena-nextcloud || true
          echo "‚úÖ Services cleaned up"

  notify-completion:
    needs: [prepare, build-backend-devops, build-frontend, start-backend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Determine build status
        id: status
        run: |
          backend_devops_result="${{ needs.build-backend-devops.result }}"
          frontend_result="${{ needs.build-frontend.result }}"
          start_backend_result="${{ needs.start-backend.result }}"

          if [[ "$backend_devops_result" == "success" ]] && [[ "$frontend_result" == "success" || "$frontend_result" == "skipped" ]] && [[ "$start_backend_result" == "success" || "$start_backend_result" == "skipped" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=‚úÖ All Docker images built and pushed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=‚ùå Docker image build failed" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Balena deployment on success
        if: steps.status.outputs.status == 'success' && (github.ref == 'refs/heads/develop' || github.event_name == 'repository_dispatch')
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: deploy-to-balena-draft
          client-payload: |
            {
              "services": ${{ needs.prepare.outputs.services }},
              "sha": "${{ github.sha }}",
              "ref": "${{ github.ref }}",
              "trigger": "${{ github.event_name }}"
            }

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const status = "${{ steps.status.outputs.status }}";
            const message = "${{ steps.status.outputs.message }}";
            const services = ${{ needs.prepare.outputs.services }};

            const body = `## üê≥ Docker Build Status: ${status === 'success' ? '‚úÖ SUCCESS' : '‚ùå FAILED'}

            ${message}

            **Services built:** ${services.join(', ')}
            **Platforms:** ${{ needs.prepare.outputs.platforms }}
            **Commit:** \`${{ github.sha }}\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });