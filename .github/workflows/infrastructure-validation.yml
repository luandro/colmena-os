name: Infrastructure Validation

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      verbose_logs:
        description: 'Enable verbose logging for debugging'
        required: false
        default: false
        type: boolean

env:
  # Test environment variables
  POSTGRES_PASSWORD: test_secure_password_123
  SECRET_KEY: test_secret_key_for_testing_purposes_minimum_fifty_characters_required
  NEXTCLOUD_ADMIN_PASSWORD: test_nextcloud_admin_pass
  SUPERADMIN_PASSWORD: test_superadmin_pass
  PGADMIN_DEFAULT_PASSWORD: test_pgadmin_pass
  COMPOSE_FILE: docker-compose.yml

jobs:
  infrastructure-validation:
    name: Infrastructure Validation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code (no submodules)
        uses: actions/checkout@v4
        with:
          submodules: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create temporary .env file
        run: |
          echo "🔧 Creating temporary .env file..."
          cat > .env << EOF
          POSTGRES_PASSWORD=$POSTGRES_PASSWORD
          SECRET_KEY=$SECRET_KEY
          NEXTCLOUD_ADMIN_PASSWORD=$NEXTCLOUD_ADMIN_PASSWORD
          SUPERADMIN_PASSWORD=$SUPERADMIN_PASSWORD
          PGLADMIN_DEFAULT_PASSWORD=$PGADMIN_DEFAULT_PASSWORD
          CORS_ALLOWED_ORIGINS=http://localhost:3000 http://127.0.0.1:3000
          POSTGRES_DB=colmena
          POSTGRES_USER=colmena
          POSTGRES_HOSTNAME=postgres
          POSTGRES_PORT=5432
          # Service ports
          HTTP_PORT=80
          BACKEND_PORT=8000
          EOF

      - name: Validate Docker Compose configuration
        run: |
          echo "🔍 Validating Docker Compose configuration syntax..."
          
          # Validate docker-compose.yml syntax
          if docker compose config --quiet; then
            echo "✅ Docker Compose configuration is valid"
          else
            echo "❌ Docker Compose configuration has errors"
            exit 1
          fi
          
          echo "📋 Docker Compose service overview:"
          docker compose config --services

      - name: Test environment variable mapping
        run: |
          echo "🔍 Testing environment variable resolution..."
          
          # Check that all required variables are resolved
          docker compose config | grep -E "(POSTGRES_|SECRET_|CORS_)" || true
          
          echo "✅ Environment variables are properly mapped"

      - name: Start PostgreSQL service only
        run: |
          echo "🚀 Starting PostgreSQL infrastructure service..."
          
          # Start only PostgreSQL service for testing
          docker compose up -d postgres
          
          echo "⏳ Waiting for PostgreSQL to become ready..."
          sleep 30

      - name: Test PostgreSQL connectivity
        run: |
          echo "🔍 Testing PostgreSQL service connectivity..."
          
          # Wait for PostgreSQL to be ready
          timeout 60 bash -c 'until docker compose exec -T postgres pg_isready -U colmena -d colmena; do echo "Waiting for PostgreSQL..."; sleep 2; done'
          
          # Test PostgreSQL connectivity
          if docker compose exec -T postgres psql -U colmena -d colmena -c "SELECT version();" > /dev/null 2>&1; then
            echo "✅ PostgreSQL is running and accessible"
          else
            echo "❌ PostgreSQL connectivity test failed"
            exit 1
          fi
          
          # Test database operations
          echo "🔍 Testing basic database operations..."
          docker compose exec -T postgres psql -U colmena -d colmena -c "CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, name VARCHAR(50));" > /dev/null 2>&1
          docker compose exec -T postgres psql -U colmena -d colmena -c "INSERT INTO test_table (name) VALUES ('infrastructure_test');" > /dev/null 2>&1
          docker compose exec -T postgres psql -U colmena -d colmena -c "SELECT COUNT(*) FROM test_table;" > /dev/null 2>&1
          docker compose exec -T postgres psql -U colmena -d colmena -c "DROP TABLE test_table;" > /dev/null 2>&1
          
          echo "✅ Basic database operations successful"

      - name: Test Docker network connectivity
        run: |
          echo "🔍 Testing Docker network connectivity..."
          
          # Test that postgres container can resolve itself
          if docker compose exec -T postgres nslookup postgres > /dev/null 2>&1; then
            echo "✅ Docker network DNS resolution working"
          else
            echo "❌ Docker network DNS resolution failed"
            exit 1
          fi

      - name: Collect service information
        if: inputs.verbose_logs == true || failure()
        run: |
          echo "📋 Collecting service information..."
          
          echo "=== Docker Compose Services ==="
          docker compose ps
          
          echo "=== PostgreSQL logs ==="
          docker compose logs postgres | tail -30
          
          echo "=== Container inspection ==="
          docker compose exec -T postgres env | grep -E "(POSTGRES_|USER|HOME)" || true
          
          echo "=== Network information ==="
          docker network ls
          docker compose exec -T postgres ip addr show || true

      - name: Check resource usage
        run: |
          echo "📊 Checking resource usage..."
          
          echo "=== Container Stats ==="
          docker stats --no-stream
          
          echo "=== System Resources ==="
          df -h
          free -h

      - name: Cleanup services
        if: always()
        run: |
          echo "🧹 Cleaning up services..."
          docker compose down -v
          docker system prune -f

  validation-summary:
    name: Infrastructure Validation Summary
    runs-on: ubuntu-latest
    needs: [infrastructure-validation]
    if: always()
    steps:
      - name: Generate validation summary
        run: |
          validation_result="${{ needs.infrastructure-validation.result }}"
          
          echo "# 🏗️ Infrastructure Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "$validation_result" = "success" ]; then
            echo "| Docker Compose Configuration | ✅ | Valid YAML syntax and service definitions |" >> $GITHUB_STEP_SUMMARY
            echo "| Environment Variables | ✅ | Proper variable mapping and resolution |" >> $GITHUB_STEP_SUMMARY
            echo "| PostgreSQL Service | ✅ | Database starts and accepts connections |" >> $GITHUB_STEP_SUMMARY
            echo "| Docker Networking | ✅ | Container networking and DNS resolution |" >> $GITHUB_STEP_SUMMARY
            echo "| Database Operations | ✅ | Basic CRUD operations working |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🎉 Overall Result: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure validation passed! Core services can be deployed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "| Infrastructure Validation | ❌ | Some infrastructure components failed validation |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ❌ Overall Result: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure validation failed. Check logs for details." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This workflow validates core infrastructure without custom builds." >> $GITHUB_STEP_SUMMARY
          echo "Full service testing requires separate workflow with build context." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Ref:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY